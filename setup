#! /bin/bash

set -Eeuo pipefail

readonly FALSE=0
readonly TRUE=1

dotfiles_repo_path="$(dirname "$(realpath "$0")")"
is_force_setup=${FALSE}
is_install_pkg=${FALSE}
is_dotfiles_to_install=${TRUE}
is_delete_dotfiles_setup=${FALSE}

# Usage instructions
print_usage() {
	echo "
NAME
	setup - Setup Dotfiles for the current user and optionally install packages.

SYNOPSIS
	./setup [--force-setup] [--install-pkg] [--help]

DESCRIPTION
	Symlink Dotfiles to current user's home directory and optionally install
	packages.

	Dotfiles supported: .clang-format, .editorconfig, .gitconfig, .prettierrc,
	.tmux.conf, .vimrc

OPTIONS
	--force-setup
		For every Dotfile in the repository, delete the corresponding
		Dotfile/Symlink in the current user's home directory (if it exists) and
		then Symlink the Dotfile.
		Requirement: Optional

	--install-pkg
		Install packages and plugin-extras on supported OSs. Symlinking  (setup)
		will be done after package installation.
		Requirement: Optional, but note that some Vim plugins depend on packages
		to be installed to work.
		Installed packages: bear, build-essential, clang-format, cmake, curl,
		gh, git, man, net-tools, nodejs, npm, python3, python3-dev, shellcheck,
		shfmt, tmux, tree, vim
		Supported OSs: Debian-based distros that support APT, like Ubuntu.
		NOTE: shfmt is available only on Ubuntu >= v22 and so the script will
		fail on Ubuntu OSs less than that version.

	--delete
		Remove all dotfile symlinks and delete any related files, like all Vim
		plugins mentioned in the .vimrc file. Packages are not uninstalled. No
		other flag will be executed if this flag is mentioned.

	--help
		Print this command usage instruction.
		Requirement: Optional

AUTHOR
	Harsh Kapadia (https://harshkapadia.me)

REPORTING BUGS
	Report bugs and improvements at
	https://github.com/HarshKapadia2/dotfiles/issues.
"
}

# Install Bash Language Server for YouCompleteMe Vim plugin
add_youcompleteme_extra_support() {
	lsp_dir="${dotfiles_repo_path}/lsp-examples"
	vimrc_path="${dotfiles_repo_path}/.vimrc"
	curr_vimrc_last_line="$(tail --lines=1 "${vimrc_path}")"
	vimrc_line_to_add="source ${lsp_dir}/vimrc.generated"

	if [[ -d "${lsp_dir}" ]]; then
		sudo rm -rf "${lsp_dir}"
	fi

	if [[ "${curr_vimrc_last_line}" == "${vimrc_line_to_add}" ]]; then
		head --lines=-1 "${vimrc_path}" > "${dotfiles_repo_path}/temp.vimrc" \
			&& mv "${dotfiles_repo_path}/temp.vimrc" "${vimrc_path}"
	fi

	git clone https://github.com/ycm-core/lsp-examples.git "${lsp_dir}"

	curr_dir="$(pwd)"
	cd "${lsp_dir}" && ./install.py "--enable-bash"
	cd "${curr_dir}"

	echo "${vimrc_line_to_add}" >> "${dotfiles_repo_path}/.vimrc"

	echo ""
	echo "Above line added to .vimrc!"
}

# Handle command-line arguments
if [[ "$#" -gt 0 ]]; then
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			"--force-setup")
				is_force_setup=${TRUE}
				shift
				;;
			"--install-pkg")
				is_install_pkg=${TRUE}
				shift
				;;
			"--delete")
				is_delete_dotfiles_setup=${TRUE}
				is_dotfiles_to_install=${FALSE}
				shift
				;;
			"--help")
				print_usage
				exit 0
				;;
			*)
				echo ""
				echo "NOTE: Ignoring invalid argument $1."
				echo ""
				shift
				;;
		esac
	done
fi

# Remove all dotfile symlinks and delete other related files
# Eg of related files: Vim's installed plugins
# NOTE: Keep deletion as the first snippet, so that other flags (if entered
# alongside `--delete`) are not executed
if [[ "${is_delete_dotfiles_setup}" == "${TRUE}" ]]; then
	echo ""
	echo "Removing dotfile symlinks..."
	echo ""

	file_list=$(ls -A "${dotfiles_repo_path}")

	for file_name in ${file_list}; do
		if [[ ("${file_name:0:1}" != ".") ||
			("${file_name}" == ".git") ||
			("${file_name}" == ".gitignore") ||
			("${file_name}" == *".swp") ]]; then
			continue
		fi

		if [[ -L "$HOME/${file_name}" ]]; then
			echo "Deleting ${file_name} symlink."
			rm "$HOME/${file_name}"
		fi
	done

	# Remove Vim plugins listed in .vimrc, if they exist
	vim_plugin_list=$(grep "Plug '" "${dotfiles_repo_path}/.vimrc" | awk '{print $2}' | awk -F "/" '{print $2}' | awk -F "'" '{print $1}')

	for plugin_name in ${vim_plugin_list}; do
		plugin_dir="$HOME/.vim/plugged/${plugin_name}"

		if [[ -d "${plugin_dir}" ]]; then
			echo "Deleting plugin '${plugin_name}'."
			rm -rf "${plugin_dir}"
		else
			echo "Plugin '${plugin_name}' not found. Skipping."
		fi
	done

	if [[ -f "$HOME/.vim/autoload/plug.vim" ]]; then
		echo "Deleting file 'plug.vim'."
		rm "$HOME/.vim/autoload/plug.vim"
	else
		echo "File 'plug.vim' not found. Skipping."
	fi

	lsp_dir="${dotfiles_repo_path}/lsp-examples"
	if [[ -d "${lsp_dir}" ]]; then
		echo "Deleting 'lsp-examples' repo."
		rm -rf "${lsp_dir}"
	else
		echo "'lsp-examples' repo not found. Skipping."
	fi

	# Hard reset the .vimrc file to remove the 'source' line added for the
	# 'lsp-examples' repo.
	cd "${dotfiles_repo_path}"
	git checkout HEAD -- "${dotfiles_repo_path}/.vimrc"

	echo ""
	echo "Done!"
	echo ""

	# Exit here so that no other flags are executed
	exit 0
fi

# Install packages and plugin-extras
if [[ "${is_install_pkg}" == "${TRUE}" ]]; then
	if command -v "apt-get"; then
		echo ""
		echo "Installing packages..."
		echo ""

		sudo apt-get update
		sudo apt-get install -y bear build-essential clang-format cmake curl \
			gh git man net-tools nodejs npm python3 python3-dev shellcheck \
			shfmt tmux tree vim

		add_youcompleteme_extra_support

		echo ""
		echo "Package and plugin-extras installation complete!"
		echo ""
	else
		echo ""
		echo "NOTE: Skipped package installation as package manager is not
supported."
		echo ""
	fi
fi

# Set up dotfiles
if [[ "${is_dotfiles_to_install}" == "${TRUE}" ]]; then
	echo ""
	echo "Setting up dotfiles..."
	echo ""

	file_list=$(ls -A "${dotfiles_repo_path}")

	for file_name in ${file_list}; do
		if [[ ("${file_name:0:1}" != ".") ||
			("${file_name}" == ".git") ||
			("${file_name}" == ".gitignore") ||
			("${file_name}" == *".swp") ]]; then
			continue
		fi

		if [[ ("${is_force_setup}" == "${TRUE}") && (-L "$HOME/${file_name}") ]]; then
			echo "Deleting ${file_name} symlink."
			rm "$HOME/${file_name}"
		fi

		if [[ ! -f "$HOME/${file_name}" ]]; then
			ln --symbolic "${dotfiles_repo_path}/${file_name}" "$HOME/${file_name}"
			echo "Symlinked ${file_name}!"
			echo ""
		else
			printf "\nNOTE: Skipped Symlinking %s as it already exists in" \
				"${file_name}"
			printf " %s. Use the '--force-setup' option to force Symlinking.\n" \
				"$HOME"
		fi
	done

	echo ""
	echo "Done!"
	echo ""
fi
