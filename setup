#! /bin/bash

# https://github.com/HarshKapadia2/dotfiles

set -Eeuo pipefail

readonly FALSE=0
readonly TRUE=1

underline_start=$(tput smul)
underline_end=$(tput rmul)

dotfiles_repo_path="$(dirname "$(realpath "$0")")"

is_force_setup=${FALSE}
is_install_pkg=${FALSE}
is_dotfiles_to_install=${TRUE}
is_delete_dotfiles_setup=${FALSE}
vimrc_type="base"

# Usage instructions
print_usage() {
	echo "
NAME
	setup - Setup Harsh Kapadia's dotfiles, and install scripts and packages

SYNOPSIS
	./setup [--force-setup] [--install-pkg] [--vim ${underline_start}vimrc_type${underline_end}]
		[--delete] [-h|--help]

DESCRIPTION
	This utility can symlink dotfiles to the current user's home directory,
	install programs (scripts) and packages, and remove/undo the setup as much
	as possible.

	Dotfiles supported: .clang-format, .editorconfig, .gitconfig, .prettierrc,
	.tmux.conf, .vimrc (with and without plugins)

OPTIONS
	If no options are given, dotfiles are symlinked (ones already present are
	skipped), the custom 'hhtop' utility is setup and Bash's PS1 is customized
	to display Git repository information.

	--force-setup
		For every dotfile in the repository, delete the corresponding
		dotfile/symlink in the current user's home directory (if it exists) and
		then symlink the dotfile in this repository in its place.

		Requirement: Optional

	--vim ${underline_start}vimrc_type${underline_end}
		Choose which type of Vim configuration file should be installed.

		The supported ${underline_start}vimrc_type${underline_end} values are 'base' and 'plugins' (without
		quotes for both values), with the default value being 'base' if the
		option is not used.

		Requirement: Optional

		The 'base' value installs a barebones .vimrc file that only configures
		the editor's in-built settings and has no external dependencies in terms
		of packages or plugins.

		If the 'plugins' value is used, a .vimrc file that uses vim-plug to
		install and manage Vim plugins will be symlinked. Check the
		'vim/plugins/.vimrc' file for the plugins that will be installed. This
		file also includes all the settings from the above 'base' .vimrc file.
		Quite a lot of the plugins require external packages to function, so
		using this value will also automatically install all packages that are
		installed by ${underline_start}--install-pkg${underline_end}.

		Examples:
		./setup --vim base                  # Default value that symlinks
		                                    # vim/base/.vimrc

		./setup --vim base --install-pkg    # Symlinks vim/base/.vimrc and
		                                    # only installs 'General packages'
		                                    # installed by ${underline_start}--install-pkg${underline_end}

		./setup --vim plugins               # Symlinks vim/plugins/.vimrc and
		                                    # installs all packages installed by
		                                    # ${underline_start}--install-pkg${underline_end}

		./setup --vim plugins --install-pkg # Same as the above command

	--install-pkg
		Install packages and Vim plugin-extras on supported OSs.

		The packages installed by this option depend on the value provided to
		the ${underline_start}--vim${underline_end} option. For the value 'base' (default if option not
		mentioned), only 'General packages' (listed below) are installed. For
		the 'plugins' value, both, the 'General packages' and the 'Vim
		plugin-specific packages' (listed below), are installed.

		Requirement: Optional, but note that some Vim plugins depend on packages
		to be installed to work.

		General packages: curl, gh, git, man, net-tools, openssh-client,
		openssh-server, tmux, tree, vim

		Vim plugin-specific packages: bear, build-essential, clang-format,
		cmake, nodejs, npm, prettier, python3, python3-dev, shellcheck, shfmt

		Supported OSs: Debian-based distros that support APT, like Ubuntu.

		NOTE: shfmt is available only on Ubuntu >= v22 and so the script will
		fail on Ubuntu OSs less than that version.

	--delete
		Remove all dotfile symlinks and delete any related files, like all Vim
		plugins mentioned in the .vimrc file. It will also attempt to clean the
		insalled programs (scripts) like 'hhtop'. Packages are not uninstalled.

		Requirement: Optional

		NOTE: No other option will be executed if this option is mentioned, with
		the exception of ${underline_start}-h${underline_end} or ${underline_start}--help${underline_end}.

	-h, --help
		Print this command usage instruction.

		Requirement: Optional

		NOTE: No other option will be executed if this option is mentioned.

AUTHOR
	Harsh Kapadia ( ${underline_start}https://harshkapadia.me${underline_end} )

WWW
	${underline_start}https://github.com/HarshKapadia2/dotfiles${underline_end}

REPORTING BUGS
	Report bugs and improvements at
	${underline_start}https://github.com/HarshKapadia2/dotfiles/issues${underline_end} .
"
}

# Install Bash Language Server for YouCompleteMe Vim plugin
add_youcompleteme_extra_support() {
	lsp_dir="${dotfiles_repo_path}/lsp-examples"

	vimrc_path=""
	if [[ "${vimrc_type}" == "plugins" ]]; then
		vimrc_path="${dotfiles_repo_path}/vim/plugins/.vimrc"
	else
		vimrc_path="${dotfiles_repo_path}/vim/base/.vimrc"
	fi

	curr_vimrc_last_line="$(tail --lines=1 "${vimrc_path}")"
	vimrc_line_to_add="source ${lsp_dir}/vimrc.generated"

	if [[ -d "${lsp_dir}" ]]; then
		sudo rm -rf "${lsp_dir}"
	fi

	if [[ "${curr_vimrc_last_line}" == "${vimrc_line_to_add}" ]]; then
		head --lines=-1 "${vimrc_path}" > "${dotfiles_repo_path}/temp.vimrc" \
			&& mv "${dotfiles_repo_path}/temp.vimrc" "${vimrc_path}"
	fi

	git clone https://github.com/ycm-core/lsp-examples.git "${lsp_dir}"

	curr_dir="$(pwd)"
	cd "${lsp_dir}" && ./install.py "--enable-bash"
	cd "${curr_dir}"

	echo "${vimrc_line_to_add}" >> "${vimrc_path}"

	echo ""
	echo "Above line added to .vimrc!"
}

# Handle command-line arguments
if [[ "$#" -gt 0 ]]; then
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			"--force-setup")
				is_force_setup=${TRUE}
				shift
				;;
			"--vim")
				if [[ "$2" == "plugins" ]]; then
					vimrc_type="plugins"
					is_install_pkg=${TRUE}
					shift
				elif [[ "$2" == "base" ]]; then
					vimrc_type="base"
					shift
				else
					echo "
NOTE: Ignoring invalid '--vim' option value '$2' and using default value 'base'.
"

					if [[ "${2:0:2}" != "--" ]]; then
						shift
					fi
				fi

				shift
				;;
			"--install-pkg")
				is_install_pkg=${TRUE}
				shift
				;;
			"--delete")
				is_delete_dotfiles_setup=${TRUE}
				is_dotfiles_to_install=${FALSE}
				shift
				;;
			"-h" | "--help")
				print_usage
				exit 0
				;;
			*)
				echo ""
				echo "NOTE: Ignoring invalid option '$1'."
				echo ""
				shift
				;;
		esac
	done
fi

# Remove all dotfile symlinks and delete other related files
# Eg of related files: Vim's installed plugins
# NOTE: Keep deletion as the first snippet, so that other options (if entered
# alongside `--delete`) are not executed
if [[ "${is_delete_dotfiles_setup}" == "${TRUE}" ]]; then
	echo ""
	echo "Removing dotfile symlinks..."
	echo ""

	file_list=$(ls -A "${dotfiles_repo_path}")

	for file_name in ${file_list}; do
		if [[ ("${file_name:0:1}" != ".") ||
			("${file_name}" == ".git") ||
			("${file_name}" == ".gitignore") ||
			("${file_name}" == *".swp") ]]; then
			continue
		fi

		if [[ -L "$HOME/${file_name}" ]]; then
			echo "Deleting ${file_name} symlink."
			rm "$HOME/${file_name}"
		fi
	done

	vimrc_path=""

	# Remove .vimrc symlink
	if [[ -L "$HOME/.vimrc" ]]; then
		vimrc_path=$(realpath "$HOME/.vimrc")
		echo "Deleting .vimrc symlink."
		rm "$HOME/.vimrc"
	fi

	echo "${vimrc_path}"

	# Remove Vim plugins listed in .vimrc, if they exist
	if [[ "${vimrc_path}" == *"plugins"* ]]; then
		echo "inside"
		vim_plugin_list=$(grep "Plug '" "${dotfiles_repo_path}/vim/plugins/.vimrc" | awk '{print $2}' | awk -F "/" '{print $2}' | awk -F "'" '{print $1}')

		for plugin_name in ${vim_plugin_list}; do
			plugin_dir="$HOME/.vim/plugged/${plugin_name}"

			if [[ -d "${plugin_dir}" ]]; then
				echo "Deleting plugin '${plugin_name}'."
				rm -rf "${plugin_dir}"
			else
				echo "Plugin '${plugin_name}' not found. Skipping."
			fi
		done

		if [[ -f "$HOME/.vim/autoload/plug.vim" ]]; then
			echo "Deleting file 'plug.vim'."
			rm "$HOME/.vim/autoload/plug.vim"
		else
			echo "File 'plug.vim' not found. Skipping."
		fi

		lsp_dir="${dotfiles_repo_path}/lsp-examples"
		if [[ -d "${lsp_dir}" ]]; then
			echo "Deleting 'lsp-examples' repo."
			rm -rf "${lsp_dir}"
		else
			echo "'lsp-examples' repo not found. Skipping."
		fi

		# Hard reset the .vimrc file to remove the 'source' line added for the
		# 'lsp-examples' repo.
		cd "${dotfiles_repo_path}"
		git checkout HEAD -- "${dotfiles_repo_path}/vim/plugins/.vimrc"
	fi

	echo ""
	echo "Uninstalling hhtop..."
	echo ""

	"${dotfiles_repo_path}/hhtop/uninstall"

	echo ""
	echo "Disabling custom prompt (ps1)..."
	echo ""

	"${dotfiles_repo_path}/customize-ps1/disable"

	echo "
Done!

NOTE: Please run 'source $HOME/.bashrc' to make changes take effect in the
      current shell.
"

	# Exit here so that no other options are executed
	exit 0
fi

# Install packages and Vim plugin-extras
if [[ "${is_install_pkg}" == "${TRUE}" ]]; then
	if command -v "apt-get"; then
		echo ""
		echo "Installing general packages..."
		echo ""

		sudo apt-get update
		sudo apt-get install -y curl gh git man net-tools openssh-client \
			openssh-server tmux tree vim

		echo ""
		echo "General package installation complete!"
		echo ""

		if [[ "${vimrc_type}" == "plugins" ]]; then
			echo ""
			echo "Installing Vim plugin-specific packages and scripts..."
			echo ""

			sudo apt-get install -y bear build-essential clang-format cmake \
				python3 python3-dev shellcheck shfmt

			sleep 2

			# Node.js and npm installation using Node Version Manager (nvm) to avoid
			# global package installation permission issues
			curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash

			sleep 1

			export NVM_DIR="$HOME/.nvm"

			if [[ -s "$NVM_DIR/nvm.sh" ]]; then
				# shellcheck disable=SC1091
				source "$NVM_DIR/nvm.sh" # This loads nvm
			fi
			if [[ -s "$NVM_DIR/bash_completion" ]]; then
				# shellcheck disable=SC1091
				source "$NVM_DIR/bash_completion" # This loads nvm bash_completion
			fi

			sleep 1

			nvm install "lts/*"
			nvm use "lts/*"

			sleep 2

			npm install --global prettier

			add_youcompleteme_extra_support

			sleep 1

			echo ""
			echo "Vim Plugin-specific packages and extras installation complete!"
			echo ""
		fi
	else
		echo "
NOTE: Skipped package installation as package manager is not supported.
"
	fi
fi

# Set up dotfiles
if [[ "${is_dotfiles_to_install}" == "${TRUE}" ]]; then
	echo ""
	echo "Setting up dotfiles..."
	echo ""

	file_list=$(ls -A "${dotfiles_repo_path}")

	for file_name in ${file_list}; do
		if [[ ("${file_name:0:1}" != ".") ||
			("${file_name}" == ".git") ||
			("${file_name}" == ".gitignore") ||
			("${file_name}" == *".swp") ]]; then
			continue
		fi

		if [[ ("${is_force_setup}" == "${TRUE}") && (-L "$HOME/${file_name}") ]]; then
			echo "Deleting ${file_name} symlink."
			rm "$HOME/${file_name}"
		fi

		if [[ ! -f "$HOME/${file_name}" ]]; then
			ln --symbolic "${dotfiles_repo_path}/${file_name}" "$HOME/${file_name}"
			echo "Symlinked ${file_name}!"
			echo ""
		else
			printf "\nNOTE: Skipped symlinking '%s' as it already exists in" \
				"${file_name}"
			printf " '%s'. Use the '--force-setup' option to delete the existing file and force symlinking.\n" \
				"$HOME"
		fi
	done

	if [[ ("${is_force_setup}" == "${TRUE}") && (-L "$HOME/.vimrc") ]]; then
		echo "Deleting .vimrc symlink."
		rm "$HOME/.vimrc"
	fi

	if [[ ! -f "$HOME/.vimrc" ]]; then
		if [[ "${vimrc_type}" == "plugins" ]]; then
			ln --symbolic "${dotfiles_repo_path}/vim/plugins/.vimrc" \
				"$HOME/.vimrc"
		else
			ln --symbolic "${dotfiles_repo_path}/vim/base/.vimrc" \
				"$HOME/.vimrc"
		fi

		echo "Symlinked .vimrc!"
		echo ""
	else
		echo "
NOTE: Skipped symlinking '.vimrc' as it already exists in '$HOME'. Use the
'--force-setup' option to delete the existing file and force symlinking.
"
	fi

	echo ""
	echo "Done!"
	echo ""
	echo "Setting up hhtop..."
	echo ""

	"${dotfiles_repo_path}/hhtop/install"

	echo ""
	echo "Setting up custon prompt (ps1)..."
	echo ""

	"${dotfiles_repo_path}/customize-ps1/install"

	echo "
Done!

NOTE: Please run 'source $HOME/.bashrc' to make changes take effect in the
      current shell.
"
fi
